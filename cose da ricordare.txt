https://programtalk.com/python-examples/sqlalchemy.event.listens_for/

1)
With .query(), parameter substitution is handled on the client, 
including objects which let data = req.body is in the above examples.

With .execute() prepared statement parameters are sent from the client as 
a serialized string and handled by the server. Since let data = req.body is an object, that's not going to work.

2)ALTER SEQUENCE songs_id_seq RESTART WITH 1 //songs nome della tabella

3)passive_delete= True per permettere l'ON DELETE CASCADE

3)
<i class="bi bi-heart" id="icona{{ song.id }}" onclick="changeHearticon(this, '{{song.id}}','{{actual_playlist}}')" ></i>
<script type="text/javascript">
    (function() {
        var fav = JSON.parse('{{ song.isFav | tojson }}');
        var id = JSON.parse('{{ song.id | tojson }}');
        if (fav){
            document.getElementById("icona"+id).classList.remove('bi-heart');
            document.getElementById("icona"+id).classList.add('bi-heart-fill');
        }
    })(); 
</script> 

function changeHearticon(icon, songId, id_playlist){
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "/playlists/"+id_playlist, true);
            
            let typeIcon = null
        
            if (icon.classList.contains('bi-heart')) {
                typeIcon="addToFav"
                icon.classList.remove("bi-heart");
                icon.classList.add("bi-heart-fill");
            } else {
                typeIcon="removeFromFav"
                icon.classList.add("bi-heart");
                icon.classList.remove("bi-heart-fill");
            }
            xhr.setRequestHeader('Content-Type', typeIcon);
            xhr.send(songId);
        }

    if(request.headers.get('Content-Type')=='addToFav'):
                        idSong=int(request.data.decode("utf-8"))
                        ps1= PlaylistSong(id_playlist=1, id_song=idSong)
                        local_session.add(ps1)
                        update_song = (
                                update(Song).
                                where(Song.id == idSong).
                                values(favourite=True)
                                )
                        local_session.execute(update_song)
                        local_session.commit()
                if(request.headers.get('Content-Type')=='removeFromFav'):
                        idSong=int(request.data.decode("utf-8"))
                        delete_song= (
                                delete(PlaylistSong).
                                where(PlaylistSong.id_playlist==1).
                                where(PlaylistSong.id_song==idSong)
                                )
                        local_session.execute(delete_song)
                        update_song = (
                                update(Song).
                                where(Song.id == idSong).
                                values(favourite=False)
                                )
                        local_session.execute(update_song)
                        local_session.commit()     

Motivo della funzione di aggregazione in Order by: https://docs.intersystems.com/irislatest/csp/docbook/DocBook.UI.Page.cls?KEY=RSQL_AGGREGATEFUNCTIONS#:~:text=An%20aggregate%20function%20cannot%20be,alias%20or%20selectItem%20sequence%20number.
https://stackoverflow.com/questions/36050890/how-to-use-sum-and-order-by-in-sqlalchemy-query


TODO:
-sistemare statistiche utente
-aggiungere bottone per aumentare i num_of_plays
-sistemare la home con canzoni consigliate, ,playlist premium
-creare pagina per errori
-creare playlist premium
-mettere indici
-aggiungere tasto per diventare premium per un utente/artista
-sistemare title jinja
-da sistemare icona nel cerca
-aggiungere flash message dove necessario
-gestire l'eccezione di una doppia canzone + messaggio d'errore
-gestire l'eccezione di un utente già presente (email e/o name)+ messaggio d'errore
 -----parte artista------
-mettere tasto per togliere album
-fare trigger per annullare inserimento doppio album+ messaggio d'errore


assunzioni:
-si assume che non si può avere due o più canzoni uguali nella stessa playlist
-ogni utente ha le sue playlist e non si possono condividere
-ogni canzone può far parte solo di un album






