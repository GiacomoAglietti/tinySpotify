https://programtalk.com/python-examples/sqlalchemy.event.listens_for/

1)
With .query(), parameter substitution is handled on the client, 
including objects which let data = req.body is in the above examples.

With .execute() prepared statement parameters are sent from the client as 
a serialized string and handled by the server. Since let data = req.body is an object, that's not going to work.

2)ALTER SEQUENCE songs_id_seq RESTART WITH 1 //songs nome della tabella


3)
<i class="bi bi-heart" id="icona{{ song.id }}" onclick="changeHearticon(this, '{{song.id}}','{{actual_playlist}}')" ></i>
<script type="text/javascript">
    (function() {
        var fav = JSON.parse('{{ song.isFav | tojson }}');
        var id = JSON.parse('{{ song.id | tojson }}');
        if (fav){
            document.getElementById("icona"+id).classList.remove('bi-heart');
            document.getElementById("icona"+id).classList.add('bi-heart-fill');
        }
    })(); 
</script> 

function changeHearticon(icon, songId, id_playlist){
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "/playlists/"+id_playlist, true);
            
            let typeIcon = null
        
            if (icon.classList.contains('bi-heart')) {
                typeIcon="addToFav"
                icon.classList.remove("bi-heart");
                icon.classList.add("bi-heart-fill");
            } else {
                typeIcon="removeFromFav"
                icon.classList.add("bi-heart");
                icon.classList.remove("bi-heart-fill");
            }
            xhr.setRequestHeader('Content-Type', typeIcon);
            xhr.send(songId);
        }


5)
-numero album artista
-numero canzoni artista
-canzoni con più ascolti
-album con più ascolti
-genere con più ascolti

TODO:
-cambire le insert con le add
-da sistemare icona nel cerca
-aggiungere flash message dove necessario
-gestire ogni commit al database con un try-catch: vedere -> https://stackoverflow.com/questions/2193670/catching-sqlalchemy-exceptions
-fare views per lista delle playlist
-mettere i @login_required e togliere i "if session.get('userid'):" dove non servono
-fare trigger per inserimento canzone già presente nella playlist?
-sezione per artisti preferiti?
-sezione per album preferiti?
 -----parte artista------
-mettere tasto per aggiungere/togliere album
-fare trigger per annullare inserimento doppio album
-fare trigger per annullare inserimento doppia canzone in un album


assunzioni:
-si assume che non si può avere due o più canzoni uguali nella stessa playlist
-ogni utente ha le sue playlist e non si possono condividere
-ogni canzone può far parte solo di un album






